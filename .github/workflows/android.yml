name: bi-monthly Android App Deploy

on:
  schedule:
    - cron: '0 0 1 */2 *'
  workflow_dispatch:  # Manual trigger

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'corretto'
  VERSION_PROPS_FILE: 'version.properties'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed for creating releases
      issues: write    # Needed for creating issues on failure

    steps:
      - name: Generate Build Date
        id: date
        run: echo "BUILD_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 

      - name: Update Version
        run: |
          if [ -f $VERSION_PROPS_FILE ]; then
            # Read current version
            version=$(grep "version_name" $VERSION_PROPS_FILE | cut -d'=' -f2)
            code=$(grep "version_code" $VERSION_PROPS_FILE | cut -d'=' -f2)
            
            # Split version into parts
            IFS='.' read -ra ADDR <<< "$version"
            major="${ADDR[0]}"
            minor="${ADDR[1]}"
            patch="${ADDR[2]}"
            build="${ADDR[3]}"
            
            # Increment build number
            new_build=$((build + 1))
            new_code=$((code + 10))
            
            # Create new version string
            new_version="$major.$minor.$patch.$new_build"
            
            # Update version.properties
            echo "version_name=$new_version" > $VERSION_PROPS_FILE
            echo "version_code=$new_code" >> $VERSION_PROPS_FILE
          else
            # Create initial version file
            echo "version_name=0.0.0.1" > $VERSION_PROPS_FILE
            echo "version_code=100" >> $VERSION_PROPS_FILE
            new_version="0.0.0.1"
            new_code="100"
          fi
          
          echo "VERSION_NAME=$new_version" >> $GITHUB_ENV
          echo "VERSION_CODE=$new_code" >> $GITHUB_ENV
          
          # Commit and push version update
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add $VERSION_PROPS_FILE
          git commit -m "Bump version to $new_version (code: $new_code) [skip ci]" || echo "No changes to commit"
          git push

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      # - name: Decode Keystore
      #   run: |
      #     echo "${{ secrets.KEYSTORE }}" > release.keystore.asc
      #     gpg -d --passphrase "${{ secrets.KEYSTORE_PASSPHRASE }}" --batch release.keystore.asc > release.keystore

      - name: Run Tests
        id: tests
        continue-on-error: true
        run: ./gradlew test

      # - name: Build Signed APK
      #   id: build
      #   continue-on-error: true
      #   run: |
      #     ./gradlew assembleRelease \
      #       -Pandroid.injected.signing.store.file=$PWD/release.keystore \
      #       -Pandroid.injected.signing.store.password=${{ secrets.STORE_PASSWORD }} \
      #       -Pandroid.injected.signing.key.alias=${{ secrets.KEY_ALIAS }} \
      #       -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }}
      #     mkdir -p artifacts

      - name: Check Build Status
        if: steps.build.outcome == 'failure' || steps.tests.outcome == 'failure'
        run: |
          echo "Build or tests failed!"
          exit 1

      - name: Build APK
        run: |
          ./gradlew assembleDebug --no-daemon
          mkdir -p artifacts

      - name: Prepare APKs for Release
        run: |
          # Create directory for each architecture
          mkdir -p artifacts/arm64-v8a
          mkdir -p artifacts/armeabi-v7a
          mkdir -p artifacts/x86
          mkdir -p artifacts/x86_64
          
          # Copy APKs to respective directories
          find app/build/outputs/apk/debug/ -name "*arm64-v8a-debug.apk" -exec cp {} artifacts/arm64-v8a/clauncher-${{ env.VERSION_NAME }}-arm64-v8a.apk \;
          find app/build/outputs/apk/debug/ -name "*armeabi-v7a-debug.apk" -exec cp {} artifacts/armeabi-v7a/clauncher-${{ env.VERSION_NAME }}-armeabi-v7a.apk \;
          find app/build/outputs/apk/debug/ -name "*x86-debug.apk" -exec cp {} artifacts/x86/clauncher-${{ env.VERSION_NAME }}-x86.apk \;
          find app/build/outputs/apk/debug/ -name "*x86_64-debug.apk" -exec cp {} artifacts/x86_64/clauncher-${{ env.VERSION_NAME }}-x86_64.apk \;

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/arm64-v8a/clauncher-${{ env.VERSION_NAME }}-arm64-v8a.apk
            artifacts/armeabi-v7a/clauncher-${{ env.VERSION_NAME }}-armeabi-v7a.apk
            artifacts/x86/clauncher-${{ env.VERSION_NAME }}-x86.apk
            artifacts/x86_64/clauncher-${{ env.VERSION_NAME }}-x86_64.apk
          name: "CLauncher v${{ env.VERSION_NAME }}"
          tag_name: "v${{ env.VERSION_NAME }}"
          prerelease: false
          body: |
            ## üì± CLauncher Release v${{ env.VERSION_NAME }}
            
            **Build Date**: ${{ env.BUILD_DATE }}
            **Version Code**: ${{ env.VERSION_CODE }}
            
            ### üìù Notes
            - This is an automated bi-monthly build
            
            ### üì¶ Available APKs
            - ARM64 (64-bit): clauncher-${{ env.VERSION_NAME }}-arm64-v8a.apk
            - ARM (32-bit): clauncher-${{ env.VERSION_NAME }}-armeabi-v7a.apk
            - x86 (32-bit): clauncher-${{ env.VERSION_NAME }}-x86.apk
            - x86_64 (64-bit): clauncher-${{ env.VERSION_NAME }}-x86_64.apk
            
          generate_release_notes: true

      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Build Failed for v${{ env.VERSION_NAME }}',
              body: 'Bi-monthly build failed on ${{ env.BUILD_DATE }}'
            })

      - name: Cleanup Artifacts
        if: always()
        run: rm -rf artifacts/.injected.signing.store.file=$PWD/release.keystore \
            -