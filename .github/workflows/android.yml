name: bi-monthly Android App Deploy

on:
  schedule:
    - cron: '0 0 1 */2 *'
  workflow_dispatch:  # Manual trigger

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'corretto'
  BUILD_GRADLE_PATH: 'app/build.gradle'  # Adjust path if necessary

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed for creating releases
      issues: write    # Needed for creating issues on failure

    steps:
      - name: Generate Build Date
        id: date
        run: echo "BUILD_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Update Version in build.gradle
        run: |
          # Extract current version code and name
          OLD_VERSION_CODE=$(grep "versionCode" $BUILD_GRADLE_PATH | head -1 | grep -oE '[0-9]+')
          OLD_VERSION_NAME=$(grep "versionName" $BUILD_GRADLE_PATH | head -1 | grep -oE '"([^"]+)"' | tr -d '"')

          # Increment version code
          NEW_VERSION_CODE=$((OLD_VERSION_CODE + 10))

          # Split version name into parts
          IFS='.' read -ra VERSION_PARTS <<< "$OLD_VERSION_NAME"

          # Increment the minor version number
          if [ ${#VERSION_PARTS[@]} -ge 2 ]; then
            MINOR=$((VERSION_PARTS[2] + 1))
            VERSION_PARTS[2]=$MINOR
          else
            echo "Version name does not have enough parts to increment minor version."
            exit 1
          fi

          # Construct new version name
          NEW_VERSION_NAME="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${VERSION_PARTS[2]}"

          # Update build.gradle
          sed -i "s/versionCode $OLD_VERSION_CODE/versionCode $NEW_VERSION_CODE/" $BUILD_GRADLE_PATH
          sed -i "s/versionName \"$OLD_VERSION_NAME\"/versionName \"$NEW_VERSION_NAME\"/" $BUILD_GRADLE_PATH

          echo "VERSION_NAME=$NEW_VERSION_NAME" >> $GITHUB_ENV
          echo "VERSION_CODE=$NEW_VERSION_CODE" >> $GITHUB_ENV

          # Commit and push version update
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add $BUILD_GRADLE_PATH
          git commit -m "Bump version to $NEW_VERSION_NAME (code: $NEW_VERSION_CODE) [skip ci]" || echo "No changes to commit"
          git push

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: 'gradle'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      - name: Run Tests
        id: tests
        continue-on-error: true
        run: ./gradlew test

      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE }}" > release.keystore.asc
          gpg -d --passphrase "${{ secrets.KEYSTORE_PASSPHRASE }}" --batch release.keystore.asc > release.keystore


      - name: Build Signed APK
        id: build
        continue-on-error: true
        run: |
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=$PWD/release.keystore \
            -Pandroid.injected.signing.store.password=${{ secrets.STORE_PASSWORD }} \
            -Pandroid.injected.signing.key.alias=${{ secrets.KEY_ALIAS }} \
            -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }}
          mkdir -p artifacts

      - name: Prepare APKs for Release
        run: |
          # Create directory for each architecture
          mkdir -p artifacts/arm64-v8a
          mkdir -p artifacts/armeabi-v7a
          mkdir -p artifacts/x86
          mkdir -p artifacts/x86_64

          # Copy APKs to respective directories
          find app/build/outputs/apk/release/ -name "*arm64-v8a-release.apk" -exec cp {} artifacts/arm64-v8a/clauncher-${{ env.VERSION_NAME }}-arm64-v8a.apk \;
          find app/build/outputs/apk/release/ -name "*armeabi-v7a-release.apk" -exec cp {} artifacts/armeabi-v7a/clauncher-${{ env.VERSION_NAME }}-armeabi-v7a.apk \;
          find app/build/outputs/apk/release/ -name "*x86-release.apk" -exec cp {} artifacts/x86/clauncher-${{ env.VERSION_NAME }}-x86.apk \;
          find app/build/outputs/apk/release/ -name "*x86_64-release.apk" -exec cp {} artifacts/x86_64/clauncher-${{ env.VERSION_NAME }}-x86_64.apk \;

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/arm64-v8a/clauncher-${{ env.VERSION_NAME }}-arm64-v8a.apk
            artifacts/armeabi-v7a/clauncher-${{ env.VERSION_NAME }}-armeabi-v7a.apk
            artifacts/x86/clauncher-${{ env.VERSION_NAME }}-x86.apk
            artifacts/x86_64/clauncher-${{ env.VERSION_NAME }}-x86_64.apk
          name: "CLauncher ${{ env.VERSION_NAME }}"
          tag_name: "${{ env.VERSION_NAME }}"
          prerelease: false
          body: |
            ## üì± CLauncher Release ${{ env.VERSION_NAME }}
            
            **Build Date**: ${{ env.BUILD_DATE }}
            **Version Code**: ${{ env.VERSION_CODE }}
            
            ### üìù Notes
            - This is an automated bi-monthly build
            
            ### üì¶ Available APKs
            - ARM64 (64-bit): clauncher-${{ env.VERSION_NAME }}-arm64-v8a.apk
            - ARM (32-bit): clauncher-${{ env.VERSION_NAME }}-armeabi-v7a.apk
            - x86 (32-bit): clauncher-${{ env.VERSION_NAME }}-x86.apk
            - x86_64 (64-bit): clauncher-${{ env.VERSION_NAME }}-x86_64.apk
            
          generate_release_notes: true
